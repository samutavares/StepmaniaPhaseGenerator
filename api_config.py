"""
Configura√ß√µes da API para o sistema PlayerStats

Este arquivo permite configurar facilmente os par√¢metros da API
sem modificar o c√≥digo principal.

IMPORTANTE: 
- Crie um arquivo .env na raiz do projeto com suas chaves de API
- Use o arquivo env_template.txt como base
- Nunca committe chaves de API no c√≥digo
"""

# Carrega vari√°veis de ambiente do arquivo .env
import os
try:
    from dotenv import load_dotenv
    load_dotenv(override=True)  # Carrega .env se python-dotenv estiver dispon√≠vel
except ImportError:
    # Se python-dotenv n√£o estiver dispon√≠vel, usa apenas os.getenv
    pass

# ======= ESCOLHA DA API =======
# A API ativa √© definida pela vari√°vel de ambiente ACTIVE_API no arquivo .env
# Valores poss√≠veis: "deepseek", "openai", "claude"
ACTIVE_API = os.getenv("ACTIVE_API", "deepseek")  # Padr√£o: deepseek
# ===============================================

# ======= CONFIGURA√á√ïES DAS APIS =======
DEEPSEEK_CONFIG = {
    "url": "https://api.deepseek.com/v1/chat/completions",
    "key": os.getenv("DEEPSEEK_API_KEY", ""),  # Carregada do .env
    "model": os.getenv("DEEPSEEK_MODEL", "deepseek-chat"),
    "timeout": int(os.getenv("API_TIMEOUT", "300")),
    "max_tokens": int(os.getenv("API_MAX_TOKENS", "4000")),
    "temperature": float(os.getenv("API_TEMPERATURE", "0.7"))
}

OPENAI_CONFIG = {
    "url": "https://api.openai.com/v1/chat/completions",
    "key": os.getenv("OPENAI_API_KEY", ""),  # Carregada do .env
    "model": os.getenv("OPENAI_MODEL", "gpt-4o"),
    "timeout": int(os.getenv("API_TIMEOUT", "300")),
    "max_completion_tokens": int(os.getenv("API_MAX_TOKENS", "4000")),
    "temperature": float(os.getenv("API_TEMPERATURE", "0.7"))  # GPT-5 ignora este valor (usa sempre 1.0)
}

CLAUDE_CONFIG = {
    "url": "https://api.anthropic.com/v1/messages",
    "key": os.getenv("CLAUDE_API_KEY", ""),  # Carregada do .env
    "model": os.getenv("CLAUDE_MODEL", "claude-3-7-sonnet-20250219"),
    "timeout": int(os.getenv("API_TIMEOUT", "300")),
    "max_tokens": int(os.getenv("API_MAX_TOKENS", "4000")),
    "temperature": float(os.getenv("API_TEMPERATURE", "0.7"))
}

# Configura√ß√£o ativa baseada na escolha
API_CONFIGS = {
    "deepseek": DEEPSEEK_CONFIG,
    "openai": OPENAI_CONFIG,
    "claude": CLAUDE_CONFIG
}

# Normaliza ACTIVE_API caso esteja inv√°lido (ex.: typos no .env)
if ACTIVE_API not in API_CONFIGS:
    print(f"‚ö†Ô∏è ACTIVE_API inv√°lido no .env: '{ACTIVE_API}'. Usando 'deepseek' como padr√£o.")
    ACTIVE_API = "deepseek"

# Configura√ß√£o atual ativa
API_CONFIG = API_CONFIGS[ACTIVE_API].copy()

# ======= MODELOS DISPON√çVEIS POR API =======
AVAILABLE_MODELS = {
    "deepseek": {
        "deepseek-chat": "Modelo de chat geral",
        "deepseek-coder": "Modelo especializado em c√≥digo",
        "deepseek-math": "Modelo especializado em matem√°tica"
    },
    "openai": {
        "gpt-5": "GPT-5 (mais recente)",
        "gpt-4o": "GPT-4o (mais barato)",
        "gpt-4": "GPT-4 (modelo anterior)",
        "gpt-3.5-turbo": "GPT-3.5 Turbo (mais r√°pido e barato)",
        "gpt-4o-mini": "GPT-4o Mini (mais barato)"
    },
    "claude": {
        "claude-3-7-sonnet-20250219": "Claude 3.7 Sonnet (mais recente)",
        "claude-sonnet-4-20250514": "Claude 4 Sonnet",
        "claude-3-5-haiku-20241022": "Claude 3 Haiku (mais r√°pido)",
        "claude-opus-4-20250514": "Claude 4 Opus (mais potente)"
    }
}

# ======= FUN√á√ïES DE CONFIGURA√á√ÉO =======
def get_api_config():
    """Retorna a configura√ß√£o atual da API"""
    return API_CONFIG.copy()

def set_active_api(api_name):
    """Muda a API ativa"""
    global API_CONFIG, ACTIVE_API
    if api_name in API_CONFIGS:
        ACTIVE_API = api_name
        API_CONFIG = API_CONFIGS[api_name].copy()
        print(f"‚úÖ API alterada para: {api_name}")
        return True
    else:
        print(f"‚ùå API '{api_name}' n√£o dispon√≠vel. Op√ß√µes: {list(API_CONFIGS.keys())}")
        return False

def get_active_api():
    """Retorna o nome da API ativa"""
    return ACTIVE_API

def get_available_apis():
    """Retorna as APIs dispon√≠veis"""
    return list(API_CONFIGS.keys())

def get_available_models(api_name=None):
    """Retorna os modelos dispon√≠veis para a API especificada ou ativa"""
    if api_name is None:
        api_name = ACTIVE_API
    return AVAILABLE_MODELS.get(api_name, {})

def set_model(model_name):
    """Altera o modelo da API ativa"""
    global API_CONFIG
    available = get_available_models()
    if model_name in available:
        API_CONFIG["model"] = model_name
        print(f"‚úÖ Modelo alterado para: {model_name}")
        return True
    else:
        print(f"‚ùå Modelo '{model_name}' n√£o dispon√≠vel para {ACTIVE_API}")
        print(f"   Op√ß√µes: {list(available.keys())}")
        return False

def validate_api_key(api_key):
    """Valida se a API key tem formato correto"""
    if not api_key or len(api_key) < 20:
        return False
    return True

def check_api_keys_loaded():
    """Verifica se as chaves de API foram carregadas corretamente"""
    print("\n=== VERIFICA√á√ÉO DE CHAVES DE API ===")
    
    # Verifica chave ativa
    active_config = API_CONFIGS[ACTIVE_API]
    active_key = active_config["key"]
    
    if validate_api_key(active_key):
        print(f"‚úÖ Chave da API ativa ({ACTIVE_API}): carregada corretamente")
    else:
        print(f"‚ùå Chave da API ativa ({ACTIVE_API}): N√ÉO carregada ou inv√°lida")
        print("üí° Verifique se o arquivo .env existe e cont√©m a chave correta")
    
    # Verifica todas as chaves
    for api_name, config in API_CONFIGS.items():
        key = config["key"]
        status = "‚úÖ" if validate_api_key(key) else "‚ùå"
        print(f"   {status} {api_name.upper()}: {'v√°lida' if validate_api_key(key) else 'inv√°lida/vazia'}")
    
    # Instru√ß√µes se necess√°rio
    if not validate_api_key(active_key):
        print(f"\nüìã INSTRU√á√ïES:")
        print(f"1. Copie env_template.txt para .env")
        print(f"2. Edite .env e adicione suas chaves reais")
        print(f"3. Reinicie o programa")

def load_from_environment():
    """Carrega configura√ß√µes de vari√°veis de ambiente (legacy - agora √© autom√°tico)"""
    print("‚ö†Ô∏è Fun√ß√£o load_from_environment() √© desnecess√°ria - vari√°veis s√£o carregadas automaticamente")
    print("‚úÖ Configura√ß√µes j√° carregadas do arquivo .env")
    
    # Verifica se as chaves foram carregadas
    check_api_keys_loaded()

def show_config():
    """Mostra a configura√ß√£o atual"""
    print("=== CONFIGURA√á√ÉO ATUAL DA API ===")
    print(f"üîó API Ativa: {ACTIVE_API.upper()}")
    print(f"üåê URL: {API_CONFIG['url']}")
    print(f"üîë API Key: {API_CONFIG['key'][:10]}...{API_CONFIG['key'][-4:]}")
    print(f"ü§ñ Modelo: {API_CONFIG['model']}")
    print(f"‚è±Ô∏è Timeout: {API_CONFIG['timeout']}s")
    
    # Mostra o par√¢metro correto baseado na API
    if ACTIVE_API == "openai":
        tokens_value = API_CONFIG.get('max_completion_tokens', 'N/A')
        print(f"üìù Max Completion Tokens: {tokens_value}")
    else:
        tokens_value = API_CONFIG.get('max_tokens', 'N/A')
        print(f"üìù Max Tokens: {tokens_value}")
    
    print(f"üå°Ô∏è Temperature: {API_CONFIG.get('temperature', 'N/A')}")
    
    print(f"\nüìã Modelos dispon√≠veis para {ACTIVE_API}:")
    for model, desc in get_available_models().items():
        status = "‚úÖ" if model == API_CONFIG['model'] else "  "
        print(f"   {status} {model}: {desc}")
    
    print(f"\nüîÑ APIs dispon√≠veis:")
    for api in get_available_apis():
        status = "‚úÖ" if api == ACTIVE_API else "  "
        print(f"   {status} {api}")

# Verifica chaves automaticamente ao importar
def _initialize():
    """Inicializa√ß√£o autom√°tica das configura√ß√µes"""
    if not any(validate_api_key(config["key"]) for config in API_CONFIGS.values()):
        print("‚ö†Ô∏è AVISO: Nenhuma chave de API v√°lida encontrada!")
        print("üí° Para configurar, execute: python api_config.py")
        print("üìÅ Ou crie o arquivo .env baseado em env_template.txt")

# Executa inicializa√ß√£o
_initialize()

# Se executado diretamente, mostra configura√ß√µes e verifica chaves
if __name__ == "__main__":
    check_api_keys_loaded()
    show_config()
